package com.proyecto_it.mercado_oficio.Domain.Service.Usuario;


import com.proyecto_it.mercado_oficio.Domain.Model.Usuario;
import com.proyecto_it.mercado_oficio.Domain.Repository.UsuarioRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;

@Component
@RequiredArgsConstructor
@Slf4j
public class UsuarioCacheProxy {

    private final UsuarioRepository usuarioRepository;
    private final UsuarioCacheService cacheService;

    //@PostConstruct
    public void inicializarCache() {
        log.info("üöÄ Inicializando cach√© de usuarios...");
        precargarUsuarios();
    }

    /**
     * Precarga TODOS los usuarios en cache al inicio
     */
    public void precargarUsuarios() {
        try {
            List<Usuario> todosLosUsuarios = usuarioRepository.findAll();

            if (todosLosUsuarios.isEmpty()) {
                log.info("‚ÑπÔ∏è No hay usuarios para precargar en cach√©");
                return;
            }

            log.info("üìä Precargando {} usuarios en cach√©...", todosLosUsuarios.size());

            // 1. Cachear cada usuario individualmente (por ID y por Gmail)
            for (Usuario usuario : todosLosUsuarios) {
                cacheService.cachearUsuario(usuario);
            }

            // 2. Cachear lista completa
            cacheService.cachearTodosLosUsuarios(todosLosUsuarios);

            log.info("‚úÖ Cach√© de usuarios inicializado exitosamente con {} usuarios",
                    todosLosUsuarios.size());

        } catch (Exception e) {
            log.error("‚ùå Error al inicializar cach√© de usuarios: {}", e.getMessage(), e);
        }
    }

    /**
     * Recarga todo el cache desde cero
     */
    public void recargarCacheCompleto() {
        log.info("üîÑ Recargando cach√© completo de usuarios...");
        precargarUsuarios();
    }

    /**
     * Precarga un usuario espec√≠fico
     */
    public void precargarUsuario(String gmail) {
        try {
            Optional<Usuario> usuarioOpt = usuarioRepository.buscarPorGmail(gmail);
            if (usuarioOpt.isPresent()) {
                cacheService.cachearUsuario(usuarioOpt.get());
                log.info("‚úÖ Usuario '{}' precargado en cach√©", gmail);
            } else {
                log.warn("‚ö†Ô∏è Usuario '{}' no encontrado para precargar", gmail);
            }
        } catch (Exception e) {
            log.error("‚ùå Error al precargar usuario '{}': {}", gmail, e.getMessage(), e);
        }
    }

    /**
     * Precarga un usuario por ID
     */
    public void precargarUsuarioPorId(int id) {
        try {
            Optional<Usuario> usuarioOpt = usuarioRepository.buscarPorId(id);
            if (usuarioOpt.isPresent()) {
                cacheService.cachearUsuario(usuarioOpt.get());
                log.info("‚úÖ Usuario con ID {} precargado en cach√©", id);
            } else {
                log.warn("‚ö†Ô∏è Usuario con ID {} no encontrado para precargar", id);
            }
        } catch (Exception e) {
            log.error("‚ùå Error al precargar usuario con ID {}: {}", id, e.getMessage(), e);
        }
    }
}